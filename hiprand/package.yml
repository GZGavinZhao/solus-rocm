name       : hiprand
version    : 5.5.1
release    : 1
source     :
    - https://github.com/ROCmSoftwarePlatform/hipRAND/archive/refs/tags/rocm-5.5.1.tar.gz : 5df9d78eae0991be5ec9f60e8d3530fabc23793d9f9cf274b075d689675db04e
license    : MIT
component  : programming.library
summary    : Random number library that generate pseudo-random and quasi-random numbers
description: |
    hipRAND is a RAND marshalling library, with multiple supported backends. It sits between the application and the backend RAND library, marshalling inputs into the backend and results back to the application. hipRAND exports an interface that does not require the client to change, regardless of the chosen backend. Currently, hipRAND supports either rocRAND or cuRAND.
clang      : yes
builddeps  :
    - rocrand-devel
    - rocminfo
    - rocm-cmake
    - rocm-compilersupport-devel
    - rocm-device-libs-devel
    - rocm-hip-devel
    - rocm-opencl-devel
    - rocm-runtime-devel
    - rocm-smi-devel
    - git
environment: |
    declare -A rocm_vars
    rocm_vars=(
        ["HIP_DEVICE_LIB_PATH"]="/usr/share/amdgcn/bitcode"
        ["DEVICE_LIB_PATH"]="/usr/share/amdgcn/bitcode"
        ["HIP_CLANG_PATH"]="/usr/bin"
        ["HIP_COMPILER"]="clang"
        ["HIP_LIB_PATH"]="/usr/lib64"
        ["HIP_PATH"]="/usr"
        ["HIP_PLATFORM"]="amd"
        ["HIP_ROCCLR_HOME"]="/usr"
        ["ROCM_PATH"]="/usr"
        ["AMDGPU_TARGETS"]="gfx1030"
        ["HCC_AMDGPU_TARGETS"]="gfx1030"
        ["BUILD_FILE_REORG_BACKWARD_COMPATIBILITY"]="OFF"
        ["HIPCC_VERBOSE"]="0"
    )

    for name in "${!rocm_vars[@]}"; do
        echo "Setting $name to ${rocm_vars[$name]}";
        export "$name"="${rocm_vars[$name]}";
        export ROCM_CMAKE_FLAGS="$ROCM_CMAKE_FLAGS -D$name=${rocm_vars[$name]}";
    done

    unset CFLAGS
    unset CXXFLAGS
    unset LDFLAGS
    export CXXFLAGS="-fcf-protection=none -mllvm -amdgpu-opt-vgpr-liverange=0"
setup      : |
    %cmake_ninja $ROCM_CMAKE_FLAGS \
                 -DCMAKE_CXX_COMPILER=hipcc \
build      : |
    %ninja_build
install    : |
    %ninja_install
    rm -rf $installdir/usr/*rand
