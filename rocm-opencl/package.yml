name       : rocm-opencl
version    : 5.5.1
release    : 2
source     :
    - https://github.com/ROCm-Developer-Tools/ROCclr/archive/refs/tags/rocm-5.5.1.tar.gz#ROCclr-5.5.1.tar.gz : 1375fc7723cfaa0ae22a78682186d4804188b0a54990bfd9c0b8eb421b85e37e
    - https://github.com/RadeonOpenCompute/ROCm-OpenCL-Runtime/archive/refs/tags/rocm-5.5.1.tar.gz#ROCm-OpenCL-Runtime-5.5.1.tar.gz : a8a62a7c6fc5398406d2203b8cb75621a24944688e545d917033d87de2724498
license    : MIT
component  : programming.devel
summary    :
    - OpenCL 2.2 compatible language runtime for AMD Radeon GPUs
    - rocm-rocclr : Radeon Open Compute Common Language Runtime
    - rocm-rocclr-devel : ROCclr development package
description: |
    OpenCL 2.2 compatible language runtime for AMD Radeon GPUs
extract    : False
clang      : yes
rundeps    :
    - rocminfo
    - rocm-compilersupport
builddeps  :
    - pkgconfig(OpenCL)
    - pkgconfig(d3d)
    - pkgconfig(gl)
    - pkgconfig(libhsakmt)
    - pkgconfig(numa)
    - pkgconfig(x11-xcb)
    - rocm-cmake
    - rocm-compilersupport-devel
    - rocm-device-libs-devel
    - rocm-runtime-devel
environment: |
    declare -A rocm_vars
    rocm_vars=(
        ["HIP_DEVICE_LIB_PATH"]="/usr/share/amdgcn/bitcode"
        ["HIP_CLANG_PATH"]="/usr/bin"
        ["HIP_COMPILER"]="clang"
        ["HIP_LIB_PATH"]="/usr/lib64"
        ["HIP_PATH"]="/usr"
        ["HIP_PLATFORM"]="amd"
        ["HIP_ROCCLR_HOME"]="/usr"
        ["ROCM_PATH"]="/usr"
    )

    for name in "${!rocm_vars[@]}"; do
        echo "Setting $name to ${rocm_vars[$name]}";
        export "$name"="${rocm_vars[$name]}";
        export ROCM_CMAKE_FLAGS="$ROCM_CMAKE_FLAGS -D$name=${rocm_vars[$name]}";
    done
setup      : |
    tar -xvzf $sources/ROCclr-%version%.tar.gz
    tar -xvzf $sources/ROCm-OpenCL-Runtime-%version%.tar.gz --strip-components=1

    # pushd ROCclr-rocm-%version%
    # # Enable experimental pre vega platforms
    # sed -i 's/\(ROC_ENABLE_PRE_VEGA.*\)false/\1true/' utils/flags.hpp
    # popd

    # Add soname to amdocl and cltrace:
    # Upstream doesn't want this because they don't guarentee ABI.
    # Just use the package version. SOVERSION can be major.minor as patch releases
    # are unlikely to break anything.
    echo "set_target_properties(amdocl PROPERTIES VERSION %version% SOVERSION $(v=%version%;echo ${v%%.*}))" \
        >> amdocl/CMakeLists.txt
    echo "libamdocl64.so.%{rocm_release}" > config/amdocl64.icd
    echo "set_target_properties(cltrace PROPERTIES VERSION %version% SOVERSION $(v=%version%;echo ${v%%.*}))" \
        >> tools/cltrace/CMakeLists.txt

    # #Clean up unused bundled code:
    # # bundled opencl2.2 headers are needed as ocl doesn't compile against latest:
    # ls -d khronos/* | grep -v headers | xargs rm -r
    # ls -d khronos/headers/* | grep -v opencl2.2 | xargs rm -r
    # # unused opencl 2.2 test code:
    # rm -r khronos/headers/opencl2.2/tests/

    %cmake_ninja $ROCM_CMAKE_FLAGS -Wno-dev  \
                                   -DAMD_OPENCL_PATH="%workdir%" \
                                   -DROCM_PATH=%PREFIX% \
                                   -DROCCLR_PATH="%workdir%/ROCclr-rocm-%version%" \
                                   -DBUILD_ICD=OFF \
                                   -DROCM_DIR=%PREFIX% \
                                   -DUSE_COMGR_LIBRARY=ON \
                                   -DFILE_REORG_BACKWARD_COMPATIBILITY=OFF \
build      : |
    %ninja_build
install    : |
    %ninja_install

    install -Dm00644 config/amdocl64.icd $installdir/usr/share/OpenCL/vendors/amdocl64.icd

    # Avoid file conflicts with opencl-headers package:
    mkdir -p $installdir/usr/include/rocm-opencl
    mv $installdir/usr/include/CL $installdir/usr/include/rocm-opencl/CL

    # #Avoid file conflicts with clinfo package:
    mv $installdir/usr/bin/clinfo $installdir/usr/bin/rocm-clinfo
