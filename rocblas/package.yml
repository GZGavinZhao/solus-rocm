name       : rocblas
version    : 5.2.3
release    : 1
source     :
    - https://github.com/ROCmSoftwarePlatform/rocBLAS/archive/refs/tags/rocm-5.2.3.tar.gz : 36f74ce53b82331a756c42f95f3138498d6f4a66f2fd370cff9ab18281bb12d5
license    : MIT
component  : programming.library
summary    : Next generation BLAS implementation for ROCm platform
description: |
    rocBLAS is the AMD library for Basic Linear Algebra Subprograms (BLAS) on the ROCm platform. It is implemented in the HIP programming language and optimized for AMD GPUs.
clang      : yes
networking : yes
cache      : no
builddeps  :
    - pkgconfig(msgpack)
    - msgpack-cpp-devel
    - python-msgpack
    - pkgconfig(libhsakmt)
    - perl-file-which
    - pyyaml
    - python-wheel
    - rocminfo
    - rocm-cmake
    - rocm-compilersupport-devel
    - rocm-device-libs-devel
    - rocm-hip-devel
    - rocm-opencl-devel
    - rocm-runtime-devel
    - rocm-smi-devel
    - git
    - virtualenv

    # - rocm-tensile
environment: |
    export ROCM_PATH=%PREFIX%
    export ROCM_DIR=%PREFIX%

    # export AMD_DEVICE_LIBS_PREFIX=%libdir%
    export HIP_PLATFORM=amd
    export HIP_RUNTIME=rocclr
    export HIP_COMPILER=clang
    export HIP_CLANG_PATH=/usr/bin
    export DEVICE_LIB_PATH=/usr/lib64/amdgcn/bitcode
    # export HIP_DEVICE_LIB_PATH=/usr/lib64/amdgcn/bitcode
    # export ROCM_DEVICE_LIB_PATH=/usr/lib64/amdgcn/bitcode
    export HSA_PATH=/usr/hsa
    export LLVM_PATH=/usr
    export HIP_CLANG_HCC_COMPAT_MODE=0
    # export HIPCC_VERBOSE=4
    # https://github.com/ROCm-Developer-Tools/HIP/blob/rocm-5.1.x/docs/markdown/clang_options.md
    export CXXFLAGS="${CXXFLAGS/-fstack-protector-strong/} -fcf-protection=none -w"
    export CFLAGS="${CFLAGS/-fstack-protector-strong/} -fcf-protection=none -w"
setup      : |
    # %patch -p1 < $pkgfiles/use-msgpack.diff

    %cmake_ninja -Wno-dev \
                 -DCMAKE_CXX_COMPILER=/usr/bin/hipcc \
                 -Dpython="/usr/bin/python3" \
                 -Damd_comgr_DIR=/usr/lib64/cmake/amd_comgr \
                 -DENABLE_INLINE_ASM=1 \
                 -DBUILD_WITH_TENSILE=ON \
                 -DTensile_COMPILER=hipcc \
                 -DTensile_PRINT_DEBUG=ON \
                 -DTensile_LIBRARY_FORMAT=msgpack \
                 -DTensile_LOGIC=asm_lite \
                 -DTensile_CODE_OBJECT_VERSION=V3 \
                 -DTensile_CPU_THREADS=6 \
                 -DBUILD_CLIENTS_TESTS=OFF \
                 -DBUILD_CLIENTS_BENCHMARKS=OFF \
                 -DBUILD_CLIENTS_SAMPLES=OFF \
                 -DBUILD_TESTING=OFF \
                 -DROCM_PATH=/usr \
                 -DBUILD_FILE_REORG_BACKWARD_COMPATIBILITY=ON \
                 -DRUN_HEADER_TESTING=OFF \
                 -DCPACK_PACKAGING_INSTALL_PREFIX=/usr \
                 -DAMDGPU_TARGETS='gfx1032' #limiting compilation to just one GPU speeds up build time massively
build      : |
    %ninja_build
install    : |
    %ninja_install
